#lang racket
;Aufgabe 1
(define (machen . strings)
  (define (machen-iter strings currentchar tempword tempwordfinal result counter counter2 counter3)
    (if (null? strings)
        (list->string result)
        (if (= counter2 0)
            (machen-iter strings '() (car strings) (car strings) result counter (+ counter2 1) counter3)
            (if (= counter3 0)
                (machen-iter strings '() (string->list tempword) (string->list tempword) result counter counter2 (+ counter 1))
                (if (< (length tempwordfinal) 3)
                    (machen-iter (cdr strings) '() (cadr strings) (cadr strings) result 0 0 0) 
                    (if (= counter 3)
                        (if (or (eq? currentchar #\x) (eq? currentchar #\X))
                            (machen-iter (cdr strings) '() (if (null? strings)
                                                               '()
                                                               (cdr strings)) (if (null? strings)
                                                                                   '()
                                                                                   (cdr strings)) (append result tempwordfinal) 0 0 0)
                            (machen-iter (cdr strings) '() (cadr strings) (cadr strings) result 0 0 0)
                    )
                    (machen-iter strings (car tempword) (cdr tempword) tempwordfinal result (+ counter 1) counter2 counter3)
                )   
            )
        )
    )
        )
    )(machen-iter strings '() '() '() '() 0 0 0)
  )
(machen "ein" "satz" "mit" "nix" "x" "ausser" "xxx")

;Aufgabe 2
(define (tauschen vektor)
  (define (tauschen-iter list listcheck result counter counter2 left right middle)
    (if (null? listcheck)
        (if (= counter2 counter)
            (if (odd? counter2)
                (list->vector (append right (cons middle left)))
                (list->vector (append right left)))
            (if (and (not (= (+ counter2 0.5) (/ counter 2))) (< counter2 (/ counter 2)) )
                (tauschen-iter (cdr list) listcheck result counter (+ counter2 1) (append left (cons (car list) '())) right middle)
                (if (and (not (= (+ counter2 0.5) (/ counter 2))) (or (> counter2 (/ counter 2)) (= counter2 (/ counter 2))))
                    (tauschen-iter (cdr list) listcheck result counter (+ counter2 1) left (append right (cons (car list) '())) middle)
                    (if (= (+ counter2 0.5) (/ counter 2))
                        (tauschen-iter (cdr list) listcheck result counter (+ counter2 1) left right (car list))
                        (tauschen-iter list listcheck result counter counter2 left right middle))
                )
               ) 
                
            )
        
            
        (tauschen-iter list (cdr listcheck) result (+ counter 1) counter2 left right middle)
        )
    ) (tauschen-iter (vector->list vektor) (vector->list vektor) '() 0 0 '() '() '())
  )
(tauschen (vector 1 2))
(tauschen (vector 1 2 3 4 5 6))
(tauschen (vector 1 2 3 4 5 6 7))

;Aufgabe 3
(define (enthalten buchstabe)
  (lambda (x) (define (enthalten-iter x buchstabe counter)
                (if (null? x)
                    (if (= counter 0)
                        #f
                        counter)
                    (if (eq? (car x) buchstabe)
                    (enthalten-iter (cdr x) buchstabe (+ counter 1))
                    (enthalten-iter (cdr x) buchstabe counter))
                    )
                ) (enthalten-iter (string->list x) buchstabe 0)
    )
  )
(define anzahll (enthalten #\l))
(anzahll "hallo Welt ")
(define anzahlL (enthalten #\L))
(anzahlL "hallo Welt ")
                                    